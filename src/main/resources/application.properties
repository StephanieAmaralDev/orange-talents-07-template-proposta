#DATABASE
spring.datasource.url=${URL_DATABASE}
spring.datasource.username=${DB_USER}
spring.datasource.password=${DB_PASSWORD}

spring.datasource.driver=org.postgresql.Driver

#JPA
spring.jpa.show-sql=true
spring.jpa.hibernate.ddl-auto = update
spring.jpa.database-platform=org.hibernate.dialect.PostgreSQL95Dialect
spring.jpa.open-in-view=true

periodicidade.executa-operacao=${NOME_DA_VARIAVEL_DE_AMBIENTE:1000}

## spring security resource server configuration
spring.security.oauth2.resourceserver.jwt.issuer-uri=${KEYCLOAK_ISSUER_URI:http://localhost:18080/auth/realms/proposta}
spring.security.oauth2.resourceserver.jwt.jwk-set-uri=${KEYCLOAK_JWKS_URI:http://localhost:18080/auth/realms/proposta/protocol/openid-connect/certs}


# Jaeger - Habilita ou não
opentracing.jaeger.enabled=${JAEGER_ENABLED:true}

# Jaeger - Nome do serviço
opentracing.jaeger.service-name=${APP_NAME}

# Jaeger - Endereço para enviar os metadados (trace, span, etc)
opentracing.jaeger.http-sender.url=${JAEGER_ENDPOINT:http://localhost:14268/api/traces}

# Jaeger - Tipo de amostragem (constante) ligado
opentracing.jaeger.const-sampler.decision=${JAEGER_SAMPLER:true}

# OpenTracing para JDBC
opentracing.spring.cloud.jdbc.enabled=false
#ACTUATOR
management.endpoints.web.exposure.include=health,metrics
management.endpoint.health.show-details=always
management.endpoints.web.exposure.exclude=env,beans